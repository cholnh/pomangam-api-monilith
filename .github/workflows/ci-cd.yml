name: Build-Deploy

on:
  push:
    branches: [ master ]
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [ master ]
    paths-ignore:
      - "**.md"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # "master" 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # replace
      - name: Replace
        uses: datamonsters/replace-action
        with:
          files: 'src/main/resources/application.yml'
          replacements: '$DBIP=${{ secrets.DB_IP }},$DBNAME=${{ secrets.$DB_NAME }},$DBUSERNAME=${{ secrets.$DB_USERNAME }},$DBPASSWORD=${{ secrets.$DB_PASSWORD }}'

      # Java + Gradle 기반 앱 테스트 및 빌드
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Source Code Test And Build
        run: |
          chmod +x gradlew
          ./gradlew build

      # Gcloud CLI 세팅
      - name: Set up Gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      # GCR 연결 위한 인증 작업 실행
      - name: Set Auth GCR
        run: gcloud --quiet auth configure-docker

      # GCR에서 이전 버전 참고하여 다음 버전 만든 후, 이미지 빌드 및 푸쉬
      - name: Build Docker Image And Delivery To GCR
        run: |
          IMAGE=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPOSITORY_NAME }}
          INPUT=$(gcloud container images list-tags --format='get(tags)' $IMAGE)
          LATEST_TAG=$(echo ${INPUT[0]} | awk -F ' ' '{print $1}' | awk -F ';' '{print $1}')
          ADD=0.01
          VERSION=$(echo "${LATEST_TAG} $ADD" | awk '{print $1 + $2}')
          NEW_VERSION=$(printf "%.2g\n" "${VERSION}")
          docker build --tag $IMAGE:${NEW_VERSION} .
          docker push $IMAGE:${NEW_VERSION}
          docker tag $IMAGE:${NEW_VERSION} $IMAGE:latest
          docker push $IMAGE:latest
      # 작업 결과 슬랙 전송
      - name: Result to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: MSA Build Result
        if: always()

  deploy:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      # SSH 접속을 통한 직접 배포
      - name: Deploy to GCE
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            CONTAINER_NAME=pmg-mono-container
            IMAGE=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPOSITORY_NAME }}
            sudo gcloud --quiet auth configure-docker
            sudo docker ps -q --filter "name=$CONTAINER_NAME" | grep -q . && sudo docker stop $CONTAINER_NAME
            sudo docker system prune -a -f
            sudo docker run -d --name "$CONTAINER_NAME" --rm -p ${{ secrets.CONTAINER_PORT }}:${{ secrets.CONTAINER_PORT }} $IMAGE:latest
      # 작업 결과 슬랙 전송
      - name: Result to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: MSA Deploy Result
        if: always()